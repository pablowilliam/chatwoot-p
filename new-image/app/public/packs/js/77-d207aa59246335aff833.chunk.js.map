{"version":3,"sources":["webpack:///./app/javascript/widget/components/PreChat/Form.vue?6b7b","webpack:///./app/javascript/widget/views/PreChatForm.vue?f726","webpack:///app/javascript/widget/components/PreChat/Form.vue","webpack:///./app/javascript/widget/components/PreChat/Form.vue?3f24","webpack:///./app/javascript/widget/components/PreChat/Form.vue","webpack:///./app/javascript/widget/components/PreChat/Form.vue?fc19","webpack:///./app/javascript/widget/views/PreChatForm.vue?fc86","webpack:///app/javascript/widget/views/PreChatForm.vue","webpack:///./app/javascript/widget/views/PreChatForm.vue","webpack:///./app/javascript/shared/helpers/markdownIt/link.js","webpack:///./app/javascript/shared/helpers/MessageFormatter.js","webpack:///./app/javascript/shared/composables/useMessageFormatter.js","webpack:///./app/javascript/shared/components/Button.vue?f3bf","webpack:///./app/javascript/shared/components/Button.vue?26c2","webpack:///app/javascript/shared/components/Button.vue","webpack:///./app/javascript/shared/components/Button.vue"],"names":["_vm","this","_c","_self","staticClass","on","onSubmit","model","value","callback","$$v","formValues","expression","directives","name","rawName","formatMessage","headerMessage","class","getThemeClass","_e","_v","_l","item","key","attrs","type","getLabel","getPlaceHolder","getValidation","getOptions","context","labelClass","inputClass","startsWithPlus","$t","isValidPhoneNumber","email","required","matches","regex_cue","hasErrorInPhoneInput","hasActiveCampaign","widgetColor","textColor","isCreating","_s","preChatFormOptions","USER_MENTIONS_REGEX","processInlineToken","blockToken","children","forEach","inlineToken","imgSrc","attrGet","height","URL","searchParams","get","attrSet","setImageHeight","md","require","html","xhtmlOut","breaks","langPrefix","linkify","typographer","quotes","maxNesting","use","renderer","rules","mention","tokens","idx","content","inline","ruler","before","state","silent","label","labelEnd","labelStart","pos","res","token","href","max","posMax","src","charCodeAt","helpers","parseLinkLabel","slice","parseLinkDestination","ok","normalizeLink","str","validateLink","match","RegExp","push","core","after","mila","rel","target","TWITTER_USERNAME_REGEX","TWITTER_HASH_REGEX","MessageFormatter","message","isATweet","isAPrivateNote","updatedMessage","replace","render","DOMParser","parseFromString","formattedMessage","body","textContent","useMessageFormatter","getPlainText","plainText","truncateMessage","description","length","highlightContent","searchTerm","highlightClass","plainTextContent","escapedSearchTerm","component","buttonClassName","style","disabled","onClick","_t"],"mappings":"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","file":"js/77-d207aa59246335aff833.chunk.js","sourcesContent":["export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/dist/cjs.js??ref--3-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??ref--3-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--3-3!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=style&index=0&id=33809b8d&prod&lang=scss&scoped=true&\"","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"flex flex-1 overflow-auto\"},[_c('PreChatForm',{attrs:{\"options\":_vm.preChatFormOptions},on:{\"submit\":_vm.onSubmit}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<script>\nimport CustomButton from 'shared/components/Button.vue';\nimport Spinner from 'shared/components/Spinner.vue';\nimport { mapGetters } from 'vuex';\nimport { getContrastingTextColor } from '@chatwoot/utils';\nimport { isEmptyObject } from 'widget/helpers/utils';\nimport { getRegexp } from 'shared/helpers/Validators';\nimport { useMessageFormatter } from 'shared/composables/useMessageFormatter';\nimport routerMixin from 'widget/mixins/routerMixin';\nimport { useDarkMode } from 'widget/composables/useDarkMode';\nimport configMixin from 'widget/mixins/configMixin';\n\nexport default {\n  components: {\n    CustomButton,\n    Spinner,\n  },\n  mixins: [routerMixin, configMixin],\n  props: {\n    options: {\n      type: Object,\n      default: () => {},\n    },\n  },\n  setup() {\n    const { formatMessage } = useMessageFormatter();\n    const { getThemeClass } = useDarkMode();\n    return { formatMessage, getThemeClass };\n  },\n  data() {\n    return {\n      locale: this.$root.$i18n.locale,\n      hasErrorInPhoneInput: false,\n      message: '',\n      formValues: {},\n      labels: {\n        emailAddress: 'EMAIL_ADDRESS',\n        fullName: 'FULL_NAME',\n        phoneNumber: 'PHONE_NUMBER',\n      },\n    };\n  },\n  computed: {\n    ...mapGetters({\n      widgetColor: 'appConfig/getWidgetColor',\n      isCreating: 'conversation/getIsCreating',\n      activeCampaign: 'campaign/getActiveCampaign',\n      currentUser: 'contacts/getCurrentUser',\n    }),\n    textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    hasActiveCampaign() {\n      return !isEmptyObject(this.activeCampaign);\n    },\n    shouldShowHeaderMessage() {\n      return this.hasActiveCampaign || this.preChatFormEnabled;\n    },\n    headerMessage() {\n      if (this.preChatFormEnabled) {\n        return this.options.preChatMessage;\n      }\n      if (this.hasActiveCampaign) {\n        return this.$t('PRE_CHAT_FORM.CAMPAIGN_HEADER');\n      }\n      return '';\n    },\n    preChatFields() {\n      return this.preChatFormEnabled ? this.options.preChatFields : [];\n    },\n    filteredPreChatFields() {\n      const isUserEmailAvailable = this.currentUser.has_email;\n      const isUserPhoneNumberAvailable = this.currentUser.has_phone_number;\n      const isUserIdentifierAvailable = !!this.currentUser.identifier;\n\n      const isUserNameAvailable = !!(\n        isUserIdentifierAvailable ||\n        isUserEmailAvailable ||\n        isUserPhoneNumberAvailable\n      );\n      return this.preChatFields.filter(field => {\n        if (isUserEmailAvailable && field.name === 'emailAddress') {\n          return false;\n        }\n        if (isUserPhoneNumberAvailable && field.name === 'phoneNumber') {\n          return false;\n        }\n        if (isUserNameAvailable && field.name === 'fullName') {\n          return false;\n        }\n        return true;\n      });\n    },\n    enabledPreChatFields() {\n      return this.filteredPreChatFields\n        .filter(field => field.enabled)\n        .map(field => ({\n          ...field,\n          type:\n            field.name === 'phoneNumber'\n              ? 'phoneInput'\n              : this.findFieldType(field.type),\n        }));\n    },\n    conversationCustomAttributes() {\n      let conversationAttributes = {};\n      this.enabledPreChatFields.forEach(field => {\n        if (field.field_type === 'conversation_attribute') {\n          conversationAttributes = {\n            ...conversationAttributes,\n            [field.name]: this.getValue(field),\n          };\n        }\n      });\n      return conversationAttributes;\n    },\n    contactCustomAttributes() {\n      let contactAttributes = {};\n      this.enabledPreChatFields.forEach(field => {\n        if (field.field_type === 'contact_attribute') {\n          contactAttributes = {\n            ...contactAttributes,\n            [field.name]: this.getValue(field),\n          };\n        }\n      });\n      return contactAttributes;\n    },\n    inputStyles() {\n      return `mt-1 border rounded w-full py-2 px-3 text-slate-700 outline-none`;\n    },\n    isInputDarkOrLightMode() {\n      return `${this.getThemeClass(\n        'bg-white',\n        'dark:bg-slate-600'\n      )} ${this.getThemeClass('text-slate-700', 'dark:text-slate-50')}`;\n    },\n    inputBorderColor() {\n      return `${this.getThemeClass(\n        'border-black-200',\n        'dark:border-black-500'\n      )}`;\n    },\n  },\n  methods: {\n    labelClass(context) {\n      const { hasErrors } = context;\n      if (!hasErrors) {\n        return `text-xs font-medium ${this.getThemeClass(\n          'text-black-800',\n          'dark:text-slate-50'\n        )}`;\n      }\n      return `text-xs font-medium ${this.getThemeClass(\n        'text-red-400',\n        'dark:text-red-400'\n      )}`;\n    },\n    inputClass(context) {\n      const { hasErrors, classification, type } = context;\n      if (classification === 'box' && type === 'checkbox') {\n        return '';\n      }\n      if (type === 'phoneInput') {\n        this.hasErrorInPhoneInput = hasErrors;\n      }\n      if (!hasErrors) {\n        return `${this.inputStyles} hover:border-black-300 focus:border-black-300 ${this.isInputDarkOrLightMode} ${this.inputBorderColor}`;\n      }\n      return `${this.inputStyles} border-red-200 hover:border-red-300 focus:border-red-300 ${this.isInputDarkOrLightMode}`;\n    },\n    isContactFieldRequired(field) {\n      return this.preChatFields.find(option => option.name === field).required;\n    },\n    getLabel({ label }) {\n      return label;\n    },\n    getPlaceHolder({ placeholder }) {\n      return placeholder;\n    },\n    getValue({ name, type }) {\n      if (type === 'select') {\n        return this.enabledPreChatFields.find(option => option.name === name)\n          .values[this.formValues[name]];\n      }\n      return this.formValues[name] || null;\n    },\n    getValidation({ type, name, field_type, regex_pattern }) {\n      let regex = regex_pattern ? getRegexp(regex_pattern) : null;\n      const validations = {\n        emailAddress: 'email',\n        phoneNumber: ['startsWithPlus', 'isValidPhoneNumber'],\n        url: 'url',\n        date: 'date',\n        text: null,\n        select: null,\n        number: null,\n        checkbox: false,\n        contact_attribute: regex ? [['matches', regex]] : null,\n        conversation_attribute: regex ? [['matches', regex]] : null,\n      };\n      const validationKeys = Object.keys(validations);\n      const isRequired = this.isContactFieldRequired(name);\n      const validation = isRequired\n        ? ['bail', 'required']\n        : ['bail', 'optional'];\n\n      if (\n        validationKeys.includes(name) ||\n        validationKeys.includes(type) ||\n        validationKeys.includes(field_type)\n      ) {\n        const validationType =\n          validations[type] || validations[name] || validations[field_type];\n        return validationType ? validation.concat(validationType) : validation;\n      }\n\n      return [];\n    },\n    findFieldType(type) {\n      if (type === 'link') {\n        return 'url';\n      }\n      if (type === 'list') {\n        return 'select';\n      }\n\n      return type;\n    },\n    getOptions(item) {\n      if (item.type === 'select') {\n        let values = {};\n        item.values.forEach((value, index) => {\n          values = {\n            ...values,\n            [index]: value,\n          };\n        });\n        return values;\n      }\n      return null;\n    },\n    onSubmit() {\n      const { emailAddress, fullName, phoneNumber, message } = this.formValues;\n      this.$emit('submit', {\n        fullName,\n        phoneNumber,\n        emailAddress,\n        message,\n        activeCampaignId: this.activeCampaign.id,\n        conversationCustomAttributes: this.conversationCustomAttributes,\n        contactCustomAttributes: this.contactCustomAttributes,\n      });\n    },\n  },\n};\n</script>\n\n<template>\n  <FormulateForm\n    v-model=\"formValues\"\n    class=\"flex flex-col flex-1 p-6 overflow-y-auto\"\n    @submit=\"onSubmit\"\n  >\n    <div\n      v-if=\"shouldShowHeaderMessage\"\n      v-dompurify-html=\"formatMessage(headerMessage, false)\"\n      class=\"mb-4 text-sm leading-5 pre-chat-header-message\"\n      :class=\"getThemeClass('text-black-800', 'dark:text-slate-50')\"\n    />\n    <FormulateInput\n      v-for=\"item in enabledPreChatFields\"\n      :key=\"item.name\"\n      :name=\"item.name\"\n      :type=\"item.type\"\n      :label=\"getLabel(item)\"\n      :placeholder=\"getPlaceHolder(item)\"\n      :validation=\"getValidation(item)\"\n      :options=\"getOptions(item)\"\n      :label-class=\"context => labelClass(context)\"\n      :input-class=\"context => inputClass(context)\"\n      :validation-messages=\"{\n        startsWithPlus: $t(\n          'PRE_CHAT_FORM.FIELDS.PHONE_NUMBER.DIAL_CODE_VALID_ERROR'\n        ),\n        isValidPhoneNumber: $t('PRE_CHAT_FORM.FIELDS.PHONE_NUMBER.VALID_ERROR'),\n        email: $t('PRE_CHAT_FORM.FIELDS.EMAIL_ADDRESS.VALID_ERROR'),\n        required: $t('PRE_CHAT_FORM.REQUIRED'),\n        matches: item.regex_cue\n          ? item.regex_cue\n          : $t('PRE_CHAT_FORM.REGEX_ERROR'),\n      }\"\n      :has-error-in-phone-input=\"hasErrorInPhoneInput\"\n    />\n    <FormulateInput\n      v-if=\"!hasActiveCampaign\"\n      name=\"message\"\n      type=\"textarea\"\n      :label-class=\"context => labelClass(context)\"\n      :input-class=\"context => inputClass(context)\"\n      :label=\"$t('PRE_CHAT_FORM.FIELDS.MESSAGE.LABEL')\"\n      :placeholder=\"$t('PRE_CHAT_FORM.FIELDS.MESSAGE.PLACEHOLDER')\"\n      validation=\"required\"\n      :validation-messages=\"{\n        required: $t('PRE_CHAT_FORM.FIELDS.MESSAGE.ERROR'),\n      }\"\n    />\n\n    <CustomButton\n      class=\"mt-2 mb-5 font-medium\"\n      block\n      :bg-color=\"widgetColor\"\n      :text-color=\"textColor\"\n      :disabled=\"isCreating\"\n    >\n      <Spinner v-if=\"isCreating\" class=\"p-0\" />\n      {{ $t('START_CONVERSATION') }}\n    </CustomButton>\n  </FormulateForm>\n</template>\n\n<style lang=\"scss\" scoped>\n@import '~widget/assets/scss/variables.scss';\n::v-deep {\n  .wrapper[data-type='checkbox'] {\n    .formulate-input-wrapper {\n      display: flex;\n      align-items: center;\n      line-height: $space-normal;\n\n      label {\n        margin-left: 0.2rem;\n      }\n    }\n  }\n  @media (prefers-color-scheme: dark) {\n    .wrapper {\n      .formulate-input-element--date,\n      .formulate-input-element--checkbox {\n        input {\n          color-scheme: dark;\n        }\n      }\n    }\n  }\n  .wrapper[data-type='textarea'] {\n    .formulate-input-element--textarea {\n      textarea {\n        min-height: 8rem;\n      }\n    }\n  }\n  .pre-chat-header-message {\n    .link {\n      color: $color-woot;\n      text-decoration: underline;\n    }\n  }\n}\n</style>\n","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--7-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--7-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Form.vue?vue&type=template&id=33809b8d&scoped=true&\"\nimport script from \"./Form.vue?vue&type=script&lang=js&\"\nexport * from \"./Form.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Form.vue?vue&type=style&index=0&id=33809b8d&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"33809b8d\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('FormulateForm',{staticClass:\"flex flex-col flex-1 p-6 overflow-y-auto\",on:{\"submit\":_vm.onSubmit},model:{value:(_vm.formValues),callback:function ($$v) {_vm.formValues=$$v},expression:\"formValues\"}},[(_vm.shouldShowHeaderMessage)?_c('div',{directives:[{name:\"dompurify-html\",rawName:\"v-dompurify-html\",value:(_vm.formatMessage(_vm.headerMessage, false)),expression:\"formatMessage(headerMessage, false)\"}],staticClass:\"mb-4 text-sm leading-5 pre-chat-header-message\",class:_vm.getThemeClass('text-black-800', 'dark:text-slate-50')}):_vm._e(),_vm._v(\" \"),_vm._l((_vm.enabledPreChatFields),function(item){return _c('FormulateInput',{key:item.name,attrs:{\"name\":item.name,\"type\":item.type,\"label\":_vm.getLabel(item),\"placeholder\":_vm.getPlaceHolder(item),\"validation\":_vm.getValidation(item),\"options\":_vm.getOptions(item),\"label-class\":context => _vm.labelClass(context),\"input-class\":context => _vm.inputClass(context),\"validation-messages\":{\n      startsWithPlus: _vm.$t(\n        'PRE_CHAT_FORM.FIELDS.PHONE_NUMBER.DIAL_CODE_VALID_ERROR'\n      ),\n      isValidPhoneNumber: _vm.$t('PRE_CHAT_FORM.FIELDS.PHONE_NUMBER.VALID_ERROR'),\n      email: _vm.$t('PRE_CHAT_FORM.FIELDS.EMAIL_ADDRESS.VALID_ERROR'),\n      required: _vm.$t('PRE_CHAT_FORM.REQUIRED'),\n      matches: item.regex_cue\n        ? item.regex_cue\n        : _vm.$t('PRE_CHAT_FORM.REGEX_ERROR'),\n    },\"has-error-in-phone-input\":_vm.hasErrorInPhoneInput}})}),_vm._v(\" \"),(!_vm.hasActiveCampaign)?_c('FormulateInput',{attrs:{\"name\":\"message\",\"type\":\"textarea\",\"label-class\":context => _vm.labelClass(context),\"input-class\":context => _vm.inputClass(context),\"label\":_vm.$t('PRE_CHAT_FORM.FIELDS.MESSAGE.LABEL'),\"placeholder\":_vm.$t('PRE_CHAT_FORM.FIELDS.MESSAGE.PLACEHOLDER'),\"validation\":\"required\",\"validation-messages\":{\n      required: _vm.$t('PRE_CHAT_FORM.FIELDS.MESSAGE.ERROR'),\n    }}}):_vm._e(),_vm._v(\" \"),_c('CustomButton',{staticClass:\"mt-2 mb-5 font-medium\",attrs:{\"block\":\"\",\"bg-color\":_vm.widgetColor,\"text-color\":_vm.textColor,\"disabled\":_vm.isCreating}},[(_vm.isCreating)?_c('Spinner',{staticClass:\"p-0\"}):_vm._e(),_vm._v(\"\\n    \"+_vm._s(_vm.$t('START_CONVERSATION'))+\"\\n  \")],1)],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--7-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PreChatForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--7-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PreChatForm.vue?vue&type=script&lang=js&\"","<script>\nimport PreChatForm from '../components/PreChat/Form.vue';\nimport configMixin from '../mixins/configMixin';\nimport routerMixin from '../mixins/routerMixin';\nimport { isEmptyObject } from 'widget/helpers/utils';\nimport { ON_CONVERSATION_CREATED } from '../constants/widgetBusEvents';\n\nexport default {\n  components: {\n    PreChatForm,\n  },\n  mixins: [configMixin, routerMixin],\n  mounted() {\n    this.$emitter.on(ON_CONVERSATION_CREATED, () => {\n      // Redirect to messages page after conversation is created\n      this.replaceRoute('messages');\n    });\n  },\n  methods: {\n    onSubmit({\n      fullName,\n      emailAddress,\n      message,\n      activeCampaignId,\n      phoneNumber,\n      contactCustomAttributes,\n      conversationCustomAttributes,\n    }) {\n      if (activeCampaignId) {\n        this.$emitter.emit('execute-campaign', {\n          campaignId: activeCampaignId,\n          customAttributes: conversationCustomAttributes,\n        });\n        this.$store.dispatch('contacts/update', {\n          user: {\n            email: emailAddress,\n            name: fullName,\n            phone_number: phoneNumber,\n          },\n        });\n      } else {\n        this.$store.dispatch('conversation/createConversation', {\n          fullName: fullName,\n          emailAddress: emailAddress,\n          message: message,\n          phoneNumber: phoneNumber,\n          customAttributes: conversationCustomAttributes,\n        });\n      }\n      if (!isEmptyObject(contactCustomAttributes)) {\n        this.$store.dispatch(\n          'contacts/setCustomAttributes',\n          contactCustomAttributes\n        );\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div class=\"flex flex-1 overflow-auto\">\n    <PreChatForm :options=\"preChatFormOptions\" @submit=\"onSubmit\" />\n  </div>\n</template>\n","import { render, staticRenderFns } from \"./PreChatForm.vue?vue&type=template&id=061a81c1&\"\nimport script from \"./PreChatForm.vue?vue&type=script&lang=js&\"\nexport * from \"./PreChatForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","// Process [@mention](mention://user/1/Pranav)\nconst USER_MENTIONS_REGEX = /mention:\\/\\/(user|team)\\/(\\d+)\\/(.+)/gm;\n\nconst buildMentionTokens = () => (state, silent) => {\n  var label;\n  var labelEnd;\n  var labelStart;\n  var pos;\n  var res;\n  var token;\n  var href = '';\n  var max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5b /* [ */) {\n    return false;\n  }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n\n  label = state.src.slice(labelStart, labelEnd);\n  pos = labelEnd + 1;\n\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    pos += 1;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n    pos += 1;\n  }\n\n  if (!href.match(new RegExp(USER_MENTIONS_REGEX))) {\n    return false;\n  }\n\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token = state.push('mention', '');\n    token.href = href;\n    token.content = label;\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n\n  return true;\n};\n\nconst renderMentions = () => (tokens, idx) => {\n  return `<span class=\"prosemirror-mention-node\">${tokens[idx].content}</span>`;\n};\n\nexport default function mentionPlugin(md) {\n  md.renderer.rules.mention = renderMentions(md);\n  md.inline.ruler.before('link', 'mention', buildMentionTokens(md));\n}\n","import mila from 'markdown-it-link-attributes';\nimport mentionPlugin from './markdownIt/link';\n\nconst setImageHeight = inlineToken => {\n  const imgSrc = inlineToken.attrGet('src');\n  if (!imgSrc) return;\n  const url = new URL(imgSrc);\n  const height = url.searchParams.get('cw_image_height');\n  if (!height) return;\n  inlineToken.attrSet('style', `height: ${height};`);\n};\n\nconst processInlineToken = blockToken => {\n  blockToken.children.forEach(inlineToken => {\n    if (inlineToken.type === 'image') {\n      setImageHeight(inlineToken);\n    }\n  });\n};\n\nconst imgResizeManager = md => {\n  // Custom rule for image resize in markdown\n  // If the image url has a query param cw_image_height, then add a style attribute to the image\n  md.core.ruler.after('inline', 'add-image-height', state => {\n    state.tokens.forEach(blockToken => {\n      if (blockToken.type === 'inline') {\n        processInlineToken(blockToken);\n      }\n    });\n  });\n};\n\nconst md = require('markdown-it')({\n  html: false,\n  xhtmlOut: true,\n  breaks: true,\n  langPrefix: 'language-',\n  linkify: true,\n  typographer: true,\n  quotes: '\\u201c\\u201d\\u2018\\u2019',\n  maxNesting: 20,\n})\n  .use(mentionPlugin)\n  .use(imgResizeManager)\n  .use(mila, {\n    attrs: {\n      class: 'link',\n      rel: 'noreferrer noopener nofollow',\n      target: '_blank',\n    },\n  });\n\nconst TWITTER_USERNAME_REGEX = /(^|[^@\\w])@(\\w{1,15})\\b/g;\nconst TWITTER_USERNAME_REPLACEMENT = '$1[@$2](http://twitter.com/$2)';\nconst TWITTER_HASH_REGEX = /(^|\\s)#(\\w+)/g;\nconst TWITTER_HASH_REPLACEMENT = '$1[#$2](https://twitter.com/hashtag/$2)';\n\nclass MessageFormatter {\n  constructor(message, isATweet = false, isAPrivateNote = false) {\n    this.message = message || '';\n    this.isAPrivateNote = isAPrivateNote;\n    this.isATweet = isATweet;\n  }\n\n  formatMessage() {\n    let updatedMessage = this.message;\n    if (this.isATweet && !this.isAPrivateNote) {\n      updatedMessage = updatedMessage.replace(\n        TWITTER_USERNAME_REGEX,\n        TWITTER_USERNAME_REPLACEMENT\n      );\n      updatedMessage = updatedMessage.replace(\n        TWITTER_HASH_REGEX,\n        TWITTER_HASH_REPLACEMENT\n      );\n    }\n    return md.render(updatedMessage);\n  }\n\n  get formattedMessage() {\n    return this.formatMessage();\n  }\n\n  get plainText() {\n    const strippedOutHtml = new DOMParser().parseFromString(\n      this.formattedMessage,\n      'text/html'\n    );\n    return strippedOutHtml.body.textContent || '';\n  }\n}\n\nexport default MessageFormatter;\n","import MessageFormatter from '../helpers/MessageFormatter';\n\n/**\n * A composable providing utility functions for message formatting.\n *\n * @returns {Object} A set of functions for message formatting.\n */\nexport const useMessageFormatter = () => {\n  /**\n   * Formats a message based on specified conditions.\n   *\n   * @param {string} message - The message to be formatted.\n   * @param {boolean} isATweet - Whether the message is a tweet.\n   * @param {boolean} isAPrivateNote - Whether the message is a private note.\n   * @returns {string} - The formatted message.\n   */\n  const formatMessage = (message, isATweet, isAPrivateNote) => {\n    const messageFormatter = new MessageFormatter(\n      message,\n      isATweet,\n      isAPrivateNote\n    );\n    return messageFormatter.formattedMessage;\n  };\n\n  /**\n   * Converts a message to plain text.\n   *\n   * @param {string} message - The message to be converted.\n   * @param {boolean} isATweet - Whether the message is a tweet.\n   * @returns {string} - The plain text message.\n   */\n  const getPlainText = (message, isATweet) => {\n    const messageFormatter = new MessageFormatter(message, isATweet);\n    return messageFormatter.plainText;\n  };\n\n  /**\n   * Truncates a description to a maximum length of 100 characters.\n   *\n   * @param {string} [description=''] - The description to be truncated.\n   * @returns {string} - The truncated description.\n   */\n  const truncateMessage = (description = '') => {\n    if (description.length < 100) {\n      return description;\n    }\n\n    return `${description.slice(0, 97)}...`;\n  };\n\n  /**\n   * Highlights occurrences of a search term within given content.\n   *\n   * @param {string} [content=''] - The content in which to search.\n   * @param {string} [searchTerm=''] - The term to search for.\n   * @param {string} [highlightClass=''] - The CSS class to apply to the highlighted term.\n   * @returns {string} - The content with highlighted terms.\n   */\n  const highlightContent = (\n    content = '',\n    searchTerm = '',\n    highlightClass = ''\n  ) => {\n    const plainTextContent = getPlainText(content);\n\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n    const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n    return plainTextContent.replace(\n      new RegExp(`(${escapedSearchTerm})`, 'ig'),\n      `<span class=\"${highlightClass}\">$1</span>`\n    );\n  };\n\n  return {\n    formatMessage,\n    getPlainText,\n    truncateMessage,\n    highlightContent,\n  };\n};\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('button',{class:_vm.buttonClassName,style:(_vm.buttonStyles),attrs:{\"disabled\":_vm.disabled},on:{\"click\":_vm.onClick}},[_vm._t(\"default\")],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--7-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Button.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--7-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Button.vue?vue&type=script&lang=js&\"","<script>\nexport default {\n  props: {\n    block: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      type: String,\n      default: 'blue',\n    },\n    bgColor: {\n      type: String,\n      default: '',\n    },\n    textColor: {\n      type: String,\n      default: '',\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    buttonClassName() {\n      let className = 'text-white py-3 px-4 rounded shadow-sm leading-4';\n      if (this.type === 'clear') {\n        className = 'flex mx-auto mt-4 text-xs leading-3 w-auto text-black-600';\n      }\n\n      if (this.type === 'blue' && !Object.keys(this.buttonStyles).length) {\n        className = `${className} bg-woot-500 hover:bg-woot-700`;\n      }\n      if (this.block) {\n        className = `${className} w-full`;\n      }\n      return className;\n    },\n    buttonStyles() {\n      const styles = {};\n      if (this.bgColor) {\n        styles.backgroundColor = this.bgColor;\n      }\n      if (this.textColor) {\n        styles.color = this.textColor;\n      }\n      return styles;\n    },\n  },\n  methods: {\n    onClick(e) {\n      this.$emit('click', e);\n    },\n  },\n};\n</script>\n\n<template>\n  <button\n    :class=\"buttonClassName\"\n    :style=\"buttonStyles\"\n    :disabled=\"disabled\"\n    @click=\"onClick\"\n  >\n    <slot />\n  </button>\n</template>\n","import { render, staticRenderFns } from \"./Button.vue?vue&type=template&id=8b06a696&\"\nimport script from \"./Button.vue?vue&type=script&lang=js&\"\nexport * from \"./Button.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}